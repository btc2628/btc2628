# Define the model and the pipeline
pipeline = Pipeline([
    ('scale', StandardScaler()), 
    ('model', LogisticRegression(max_iter=5000, solver='saga'))  # Using 'saga' solver for its versatility
])

# Define the parameter space for RandomizedSearch
param_distributions = {
    'model__C': loguniform(1e-4, 1e0),  # Regularization strength on a log scale
    'model__penalty': ['elasticnet'],  # Using elasticnet
    'model__l1_ratio': uniform(0, 1)  # Mixing ratio of l1 and l2 penalties in elasticnet
}

# Define the KFold cross-validator
kfold = KFold(n_splits=5, shuffle=True, random_state=42)

# Setup the RandomizedSearchCV
random_search = RandomizedSearchCV(pipeline, param_distributions=param_distributions, n_iter=100, cv=kfold, verbose=1, random_state=42, n_jobs=-1)

# Fit the RandomizedSearchCV to find the best model
random_search.fit(X, Y)

# Best model after Randomized Search
print("Best parameters found: ", random_search.best_params_)
print("Best score: ", random_search.best_score_)
