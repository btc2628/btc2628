import pandas as pd
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from scipy.stats import randint

# Assuming your dataframe `df` has features and target columns defined
X = df.drop('target_column', axis=1)  # Replace 'target_column' with your actual target column name
y = df['target_column']  # Replace 'target_column' with your actual target column name

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Random Forest Regressor
rf = RandomForestRegressor()

# Define the parameter grid for RandomizedSearchCV
param_distributions = {
    'n_estimators': randint(100, 500),
    'max_depth': randint(5, 50),
    'min_samples_split': randint(2, 10),
    'min_samples_leaf': randint(1, 4),
    'max_features': ['auto', 'sqrt', 'log2']
}

# Initialize RandomizedSearchCV
random_search = RandomizedSearchCV(
    estimator=rf, 
    param_distributions=param_distributions, 
    n_iter=50,  # Number of parameter settings that are sampled
    scoring='neg_mean_squared_error',
    cv=5,  # 5-fold cross-validation
    random_state=42, 
    n_jobs=-1  # Use all available cores
)

# Fit the RandomizedSearchCV model
random_search.fit(X_train, y_train)

# Print the best parameters
print("Best Parameters found by RandomizedSearchCV:", random_search.best_params_)

# Predict on the test set
y_pred = random_search.predict(X_test)

# Calculate the mean squared error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error on the test set:", mse)
